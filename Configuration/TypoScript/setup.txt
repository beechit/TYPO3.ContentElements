# ***************************************************************************
# Notice: "styles." (and "temp.") objects are UNSET after template parsing!
# Use "lib." for persisting storage of objects.
# ***************************************************************************

# Clear out any constants in this reserved room!
styles.content >

styles.content {
	# get content
	get = CONTENT
	get {
		table = tt_content
		select {
			orderBy = sorting
			where = colPos=0
			languageField = sys_language_uid
		}
	}

	# get content, left
	getLeft < styles.content.get
	getLeft.select.where = colPos=1

	# get content, right
	getRight < styles.content.get
	getRight.select.where = colPos=2

	# get content, margin
	getBorder < styles.content.get
	getBorder.select.where = colPos=3

	# get news
	getNews < styles.content.get
	getNews.select.pidInList = {$styles.content.getNews.newsPid}

	# Edit page object:
	editPanelPage = COA
	editPanelPage {
		10 = EDITPANEL
		10 {
			allow = toolbar,move,hide
			label{
				data = LLL:EXT:css_styled_content/pi1/locallang.xml:eIcon.page
				wrap = |&nbsp;<b>%s</b>
			}
		}
	}
}

# *********************************************************************
# "lib." objects are preserved from unsetting after template parsing
# *********************************************************************

# Creates a condition for targets. Not allowed in XHTML except for xhtml frames DTD
lib.parseTarget {
	override =
	override.if {
		isTrue.data = TSFE:dtdAllowsFrames
	}
}

# Creates persistent ParseFunc setup for non-HTML content. This is recommended to use (as a reference!)
lib.parseFunc {
	makelinks = 1
	makelinks {
		http {
			keep = {$styles.content.links.keep}
			extTarget < lib.parseTarget
			extTarget =
			extTarget.override = {$styles.content.links.extTarget}
		}
		mailto {
			keep = path
		}
	}
	tags {
		link = TEXT
		link {
			current = 1
			typolink {
				parameter.data = parameters : allParams
				extTarget < lib.parseTarget
				extTarget =
				extTarget.override = {$styles.content.links.extTarget}
				target < lib.parseTarget
				target =
				target.override = {$styles.content.links.target}
			}
			parseFunc.constants = 1
		}
	}
	allowTags = {$styles.content.allowTags}
	denyTags = *
	sword = <span class="csc-sword">|</span>
	constants = 1
	nonTypoTagStdWrap {
		HTMLparser = 1
		HTMLparser {
			keepNonMatchedTags = 1
			htmlSpecialChars = 2
		}
	}
}

# good old parsefunc in "styles.content.parseFunc" is created for backwards compatibility. Don't use it, just ignore.
styles.content.parseFunc < lib.parseFunc

# Creates persistent ParseFunc setup for RTE content (which is mainly HTML) based on the "ts_css" transformation.
lib.parseFunc_RTE < lib.parseFunc
lib.parseFunc_RTE {
	//  makelinks >
	# Processing <table> and <blockquote> blocks separately
	externalBlocks = article, aside, blockquote, div, dd, dl, footer, header, nav, ol, section, table, ul
	externalBlocks {
		# The blockquote content is passed into parseFunc again...
		blockquote {
			stripNL = 1
			callRecursive = 1
			callRecursive {
				tagStdWrap {
					HTMLparser = 1
					HTMLparser.tags.blockquote.overrideAttribs = style="margin-bottom:0;margin-top:0;"
				}
			}
		}

		ol {
			stripNL = 1
			stdWrap.parseFunc = < lib.parseFunc
		}

		ul {
			stripNL = 1
			stdWrap.parseFunc = < lib.parseFunc
		}

		table {
			stripNL = 1
			stdWrap {
				HTMLparser = 1
				HTMLparser {
					tags.table.fixAttrib.class {
						default = contenttable
						always = 1
						list = contenttable
					}
					keepNonMatchedTags = 1
				}
			}
			HTMLtableCells = 1
			HTMLtableCells {
				# Recursive call to self but without wrapping non-wrapped cell content
				default.stdWrap {
					parseFunc = < lib.parseFunc_RTE
					parseFunc.nonTypoTagStdWrap.encapsLines.nonWrappedTag =
				}
				addChr10BetweenParagraphs = 1
			}
		}

		div {
			stripNL = 1
			callRecursive = 1
		}

		article < .div
		aside < .div
		footer < .div
		header < .div
		nav < .div
		section < .div
		dl < .div
		dd < .div
	}
	nonTypoTagStdWrap {
		encapsLines {
			encapsTagList = p,pre,h1,h2,h3,h4,h5,h6,hr,dt
			remapTag.DIV = P
			nonWrappedTag = P
			innerStdWrap_all.ifBlank = &nbsp;
			addAttributes {
				P {
					class = bodytext
					class.setOnly = blank
				}
			}
		}
	}
	nonTypoTagStdWrap {
		HTMLparser = 1
		HTMLparser {
			keepNonMatchedTags = 1
			htmlSpecialChars = 2
		}
	}
}

plugin.tx_contentelements {
	view {
		file = {$contentelements.view.templateRootPath}Default.html
		partialRootPath = {$contentelements.view.partialRootPath}
		layoutRootPath = {$contentelements.view.layoutRootPath}
	}
}

lib.stdContent >
lib.stdContent = FLUIDTEMPLATE
lib.stdContent {
	file = {$contentelements.view.templateRootPath}Default.html
	partialRootPath = {$contentelements.view.partialRootPath}
	layoutRootPath = {$contentelements.view.layoutRootPath}

	settings {
		defaultHeaderType = {$content.defaultHeaderType}
		shortcutTables = {$content.shortcut.tables}
	}
}

lib.userContent >
lib.userContent = USER
lib.userContent {
	userFunc = TYPO3\CMS\Extbase\Core\Bootstrap->run
	vendorName = PatrickBroens
	extensionName = Contentelements
	pluginName = Contentelements
	switchableControllerActions {
		ContentElement {
			1 = default
		}
	}
}

tt_content >
tt_content = CASE
tt_content {
	key {
		field = CType
	}
	bullets < lib.userContent
	bullets {
		switchableControllerActions {
			ContentElement {
				1 = bullets
			}
		}
	}
	div < lib.stdContent
	div {
		file = {$contentelements.view.templateRootPath}Div.html
	}
	header < lib.stdContent
	header {
		file = {$contentelements.view.templateRootPath}Header.html
	}
	html < lib.stdContent
	html {
		file = {$contentelements.view.templateRootPath}Html.html
	}
	shortcut < lib.stdContent
	shortcut {
		file = {$contentelements.view.templateRootPath}Shortcut.html
	}
	table < lib.userContent
	table {
		switchableControllerActions {
			ContentElement {
				1 = table
			}
		}
	}
	text < lib.stdContent
	text {
		file = {$contentelements.view.templateRootPath}Text.html
	}
	uploads < lib.userContent
	uploads {
		switchableControllerActions {
			ContentElement {
				1 = uploads
			}
		}
	}
}